@page "/flows"
@using System.IO.Compression
@using System.Text.Json
@using MaIN.Models.Rag
@using MainFE.Components.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.FluentUI.AspNetCore.Components
@inject HttpClient Http
@inject NavigationManager Nav
@rendermode InteractiveServer

<PageTitle>🌀 Flows</PageTitle>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
<link rel="stylesheet" href="css/flows.css">
<link rel="stylesheet" href="css/chat.css">

@switch (_mode)
{
    case AgentsFlowPageMode.List:
        <FluentGrid Class="flow-grid" Spacing="1" Justify="JustifyContent.Center">
            @* <FluentGridItem lg="1"></FluentGridItem> *@
            <FluentGridItem lg="8" md="4" sm="6" xs="12" Style="margin-left: 5rem;">
                <FluentInputFile Id="my-zip-uploader"
                                 Mode="InputFileMode.SaveToTemporaryFolder"
                                 Multiple="true"
                                 MaximumFileCount="4"
                                 MaximumFileSize="@(10 * 1024 * 1024)"
                                 Accept=".zip"
                                 @* @bind-ProgressPercent="@ProgressPercent" *@
                                 OnCompleted="@OnCompletedAsync"
                                 Style="background-color: transparent !important; color: whitesmoke !important;">
                    <ChildContent>
                        <label for="my-zip-uploader" class="cleanup-button"
                               style="text-decoration: none !important; font-style: normal; width: 20rem; font-size: 20px !important; color: white">
                            <i class="fas fa-stream"></i> Import flow
                            @* <button class="cleanup-button" style="width: 20rem; font-size: 20px !important;"> *@
                            @*     <i class="fas fa-stream"></i> Import flow *@
                            @* </button> *@
                        </label>
                    </ChildContent>
                </FluentInputFile>
            </FluentGridItem>
            <FluentGridItem lg="1">
                @* <button @onclick="NavigateToDemo" class="cleanup-button" style="font-size: 13px !important; background-color: #4CAF50 !important; margin-left: 3rem"> *@
                @*     <i class="fas fa-flask"></i> Demo *@
                @* </button> *@
            </FluentGridItem>
            <FluentProgressRing Visible="_loading"></FluentProgressRing>

            @foreach (var flow in flows)
            {
                <FluentGridItem lg="3" md="4" sm="6" xs="12" Class="flow-tile-container">
                    <div class="flow-tile" @onclick="() => ViewFlowDetails(flow.Id)">
                        <div class="flow-header">
                            <FluentBadge Appearance="Appearance.Neutral" Class="flow-name-badge">
                                @flow.Name 🌀
                            </FluentBadge>
                            <button class="remove-btn" @onclick:stopPropagation="true" @onclick="() => RemoveFlow(flow.Id)">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>
                        <div class="flow-description-box">
                            <p>@flow.Description</p>
                        </div>
                        <div class="flow-agents">
                            @foreach (var agent in flow.Agents.Select((value, index) => new { value, index }))
                            {
                                <div class="agent-item">
                                    <span class="agent-number">@(agent.index + 1).</span>
                                    <span class="agent-name">@agent.value.Name</span>
                                    <FluentBadge Style="margin-left: 5px;" Appearance="Appearance.Accent">@agent.value.Model</FluentBadge>
                                    <FluentBadge Style="margin-left: 5px;" Appearance="Appearance.Accent">@(agent.value.Context.Steps.Count == 1 ? "1 step" : $"{agent.value.Context.Steps.Count} steps")</FluentBadge>
                                    @if (IsEntryPoint(flow, agent.value))
                                    {
                                        <i class="fas fa-sign-in-alt entry-icon" title="Entry Point"></i>
                                    }
                                    @if (IsExitPoint(agent.value))
                                    {
                                        <i class="fas fa-sign-out-alt exit-icon" title="Exit Point"></i>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </FluentGridItem>
            }
            <FluentGridItem lg="12"></FluentGridItem>
            <FluentGridItem lg="3"></FluentGridItem>
            <FluentGridItem lg="6" md="12" sm="12" xs="12" Style="margin: auto">
                @* <FluentInputFile Id="my-zip-uploader" *@
                @*                  Mode="InputFileMode.SaveToTemporaryFolder" *@
                @*                  Multiple="true" *@
                @*                  MaximumFileCount="4" *@
                @*                  MaximumFileSize="@(10 * 1024 * 1024)" *@
                @*                  Accept=".zip" *@
                @*                  $1$ @bind-ProgressPercent="@ProgressPercent" #1# *@
                @*                  OnCompleted="@OnCompletedAsync" *@
                @*                  Style="background-color: transparent !important;"> *@
                @*     <ChildContent> *@
                @*         <label for="my-zip-uploader" class="cleanup-button" *@
                @*                style="text-decoration: none !important; font-style: normal; width: 20rem; font-size: 20px !important;" > *@
                @*             <i class="fas fa-stream"></i> Import flow *@
                @*             $1$ <button class="cleanup-button" style="width: 20rem; font-size: 20px !important;"> #1# *@
                @*             $1$     <i class="fas fa-stream"></i> Import flow #1# *@
                @*             $1$ </button> #1# *@
                @*         </label> *@
                @*     </ChildContent> *@
                @* </FluentInputFile> *@
            </FluentGridItem>
            <FluentGridItem lg="3"></FluentGridItem>
        </FluentGrid>
        break;


    case AgentsFlowPageMode.Details:
        <FluentGrid Class="agents-grid" Spacing="1" Justify="JustifyContent.Center">
            <FluentGridItem lg="3">
                <button @onclick="GoBack" class="back-button">
                    <i class="fas fa-arrow-left"></i>
                </button>
            </FluentGridItem>
            <FluentGridItem lg="7">
              <div class="agent-container">
                  @foreach (var agent in selectedFlow.Agents)
                  {
                      <div class="agent-card @GetProcessingClass(agent)" id="@GetAgentId(agent)">
                          <FluentCard>
                              <h3>@agent.Name</h3>
                          </FluentCard>
              
                          @if (agent.AgentDependencyId is not null)
                          {
                              <div class="agent-line" data-from="@agent.Id" data-to="@agent.AgentDependencyId"></div>
                          }
                      </div>
                  }
              </div>
            </FluentGridItem>
        </FluentGrid>
        break;
}

@code {

    // Models
    AgentFlowDto newFlow;
    List<string> models = new();
    List<AgentFlowDto> flows = new();
    string _selectedModel = string.Empty;
    ChatDto _selectedChat = new() { Messages = new() };
    AgentFlowDto selectedFlow = new();
    AgentsFlowPageMode _mode = AgentsFlowPageMode.List;
    bool _loading = false;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        newFlow = new()
        {
            Id = Guid.NewGuid().ToString()
        };
        
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{ExtensionMethods.GetApiUrl()}/diagnostic")
            .Build();
        
        hubConnection!.On<JsonElement>("ReceiveAgentUpdate", (jsonElement) =>
        {
            var agentId = jsonElement.GetProperty("agentId").GetString();
            var isProcessing = jsonElement.GetProperty("isProcessing").GetBoolean();

            var agent = selectedFlow.Agents.FirstOrDefault(a => a.Id.ToString() == agentId);
            if (agent != null)
            {
                agent.IsProcessing = isProcessing;
                InvokeAsync(StateHasChanged); 
            }
        });

        await hubConnection.StartAsync();
        Http.Timeout = TimeSpan.FromMinutes(10);
        await LoadFlowsAsync();
    }

    private async Task LoadChatAsync(string agentId)
    {
        var response = await Http.GetFromJsonAsync<ChatDto>($"{ExtensionMethods.GetApiUrl()}/api/agents/{agentId}/chat");
        if (response != null)
        {
            _selectedChat = response;
            _selectedModel = response.Model;
        }
    }
    
    private string GetProcessingClass(AgentDto agent)
    {
        return agent.IsProcessing ? "loading-border" : string.Empty;
    }

    private string GetAgentId(AgentDto agent) => $"agent-{agent.Id}";
    private async Task RemoveFlow(string flowId)
    {
        await Http.DeleteAsync($"{ExtensionMethods.GetApiUrl()}/api/flows/{flowId}");
        await LoadFlowsAsync();
    }

    private async Task Cleanup(string selectedAgentId) //Is it still valid?
    {
        await Http.PutAsync($"{ExtensionMethods.GetApiUrl()}/api/agents/{selectedAgentId}/chat/reset", default);
        await LoadChatAsync(selectedAgentId);
    }

    private async Task LoadFlowsAsync()
    {
        var response = await Http.GetFromJsonAsync<List<AgentFlowDto>>($"{ExtensionMethods.GetApiUrl()}/api/flows");
        if (response != null)
        {
            flows = response;
        }
    }

    private async Task ViewFlowDetails(string agentId)
    {
        selectedFlow = flows.FirstOrDefault(a => a.Id == agentId)!;
        _mode = AgentsFlowPageMode.Details;
        //await LoadChatAsync(selectedAgent.Id); TODO fix this the way we can see real entrypoint for flow
    }

    private async Task CreateFlow()
    {
        _loading = true;
        //  newFlow.Context.Steps = ["START"];
        newFlow.Id = Guid.NewGuid().ToString();
        var response = await Http.PostAsJsonAsync($"{ExtensionMethods.GetApiUrl()}/api/flows", newFlow);
        if (response.IsSuccessStatusCode)
        {
            newFlow = new(); // Reset the form
            await LoadFlowsAsync(); // Refresh the agents list
            _loading = false;
            _mode = AgentsFlowPageMode.List; // Switch back to list mode
        }
    }

    private void GoBack()
    {
        _mode = AgentsFlowPageMode.List;
    }

    private bool IsEntryPoint(AgentFlowDto flow, AgentDto agent)
    {
        return flow.Agents.All(a => !a.Context.Steps.Any(step => step.Contains("REDIRECT") && step.Contains(agent.Id))) || flow.Agents.Count == 1;
    }

    private bool IsExitPoint(AgentDto agent)
    {
        return !agent.Context.Steps.Any(step => step.StartsWith("REDIRECT")) || agent.Context.Steps.Count == 1;
    }
    
    private void SwitchToCreate()
    {
        _mode = AgentsFlowPageMode.Create;
    }

    private async Task OnCompletedAsync(IEnumerable<FluentInputFileEventArgs> files)
    {
        _loading = true;
        List<AgentDto> agents = new List<AgentDto>();
        var desc = string.Empty;

        foreach (var fileEvent in files)
        {
            var file = fileEvent.LocalFile; // Access the uploaded file
            if (file != null && fileEvent.Name.EndsWith(".zip"))
            {
                await using var stream = file.Open(FileMode.Open);
                // Create a ZipArchive object from the stream
                using var zipArchive = new ZipArchive(stream, ZipArchiveMode.Read);
                foreach (var entry in zipArchive.Entries)
                {
                    if (entry.FullName.EndsWith("description.txt"))
                    {
                        await using var textStream = entry.Open();
                        using var textReader = new StreamReader(textStream);
                        var txtString = await textReader.ReadToEndAsync();
                        desc = txtString;
                    }

                    if (!entry.FullName.EndsWith(".json", StringComparison.OrdinalIgnoreCase)) continue;
                    // Extract JSON file
                    await using var jsonStream = entry.Open();
                    using var reader = new StreamReader(jsonStream);
                    var jsonString = await reader.ReadToEndAsync();

                    // Process the JSON string (e.g., deserialize it into an object)
                    var agent = JsonSerializer.Deserialize<AgentDto>(jsonString);

                    // Now, you can work with the jsonObject
                    agents.Add(agent!);
                }
            }
        }

        var newFlow = new AgentFlowDto()
        {
            Agents = agents,
            Name = files.First().Name.Split('.').First(),
            Description = desc
        };

        await Http.PostAsJsonAsync($"{ExtensionMethods.GetApiUrl()}/api/flows", newFlow);
        await LoadFlowsAsync();
        _loading = false;
    }

}
@page "/RAG"
@using MainFE.Components.Models
@using Markdig
@using Microsoft.FluentUI.AspNetCore.Components
@using Message = MainFE.Components.Models.Message
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject HttpClient Http

<link rel="stylesheet" href="css/rag.css">

<div class="header-container">
    <div class="logo-container">
        <img src="images/demo/logo.png" alt="" class="center-logo"/>
    </div>
    <button class="ask-assistant-button" data-toggle="modal" data-target="#askAssistantModal">Ai ðŸ’¬</button>
</div>
<div class="card-container">
    @foreach (var item in _items)
    {
        <FluentCard class="card">
            <div class="card-content">
                <img src="/images/demo/@item.Image" alt="@item.Name" class="card-image"/>
                <h3>@item.Name</h3>
                <p>
                    <strong>Brand:</strong> @item.Brand
                </p>
                <p>
                    <strong>Type:</strong> @item.Type
                </p>
                <button class="btn btn-secondary" data-toggle="modal" data-target="#detailsModal"
                        @onclick="() => ShowDetailsModal(item)">
                    Show More
                </button>
            </div>
        </FluentCard>
    }
</div>

<div class="modal fade" id="askAssistantModal" tabindex="-1" role="dialog" aria-labelledby="askAssistantModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content custom-modal">
            <div class="modal-header custom-modal-header">
                <h5 class="modal-title fancy-text" id="askAssistantModalLabel">Ask ðŸ‘¾</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body custom-modal-body">
                <div class="messages-container">
                    @foreach (var message in _messages)
                    {
                        @if (message.Role != Role.System.ToString().ToLowerInvariant())
                        {
                        <span class="@(message.Role == Role.User.ToString() ? "message-role-user" : "message-role-bot")">@GetRoleLabel(message.Role)</span>
                  
                            <FluentCard class="@(message.Role == Role.User.ToString() ? "message-card user-message" : "message-card bot-message")">
                                @((MarkupString)((message.Role == Role.User.ToString()
                                    ? message.Content
                                    : Markdown.ToHtml((string)message.Content!,
                                        new MarkdownPipelineBuilder()
                                            .UseAdvancedExtensions()
                                            .Build())) ?? string.Empty))
                            </FluentCard>
                        }
                    }
                    @if (_loading)
                    {
                        <span class="message-role-bot">Assistant ðŸ‘¾</span>
                        <FluentProgressRing Visible="_loading"></FluentProgressRing>
                    }
                </div>
                <div class="input-container">
                    <input @bind-value="_ask" @bind-value:event="oninput" placeholder="Enter your prompt here..." @onkeydown="CheckEnterKey" class="inp">
                    <FluentButton IconStart="@(new Icons.Filled.Size28.Send())" BackgroundColor="rgba(0, 0, 0, 0)" Style="margin-top: 5px; background-color: transparent"
                                  Appearance="Appearance.Lightweight"
                                  Loading="@_loading"
                                  OnClick="@(() => SendAsync(_ask))">
                    </FluentButton>
                </div>
                <FluentProgress Visible="@(_loading)" style="width: 100%;"></FluentProgress>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="detailsModal" tabindex="-1" role="dialog" aria-labelledby="detailsModalLabel"
     aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content bg-dark text-light border border-secondary">
            <div class="modal-header border-bottom-0">
                <h5 class="modal-title" id="detailsModalLabel">@selectedItem.Name Details</h5>
                <button type="button" class="close text-light" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>
                    <strong>Brand:</strong> @selectedItem.Brand
                </p>
                <p>
                    <strong>Type:</strong> @selectedItem.Type
                </p>
                <p>
                    <strong>Processor:</strong> @selectedItem.Processor
                </p>
                <p>
                    <strong>RAM:</strong> @selectedItem.Ram
                </p>
                <p>
                    <strong>Storage:</strong> @selectedItem.Storage
                </p>
                <p>
                    <strong>GPU:</strong> @selectedItem.Gpu
                </p>
                <p><strong>Price:</strong> $@selectedItem.Price</p>
                <p>
                    <strong>Availability:</strong> @selectedItem.Availability
                </p>
                <p>
                    <strong>Description:</strong>
                </p>
                <p>@selectedItem.Description</p>
            </div>
        </div>
    </div>
</div>

@code {
    string selectedModel = "llama3:8b";
    List<Message> _messages = new();
    ChatDto _selectedChat = new();
    string _ask = string.Empty;
    bool _loading = false;
    
    HardwareItemDto selectedItem = new();
    private List<HardwareItemDto> _items = new();

    protected override async Task OnInitializedAsync()
    {
        Http.Timeout = TimeSpan.FromMinutes(10);
        await InitRagAsync();
        await LoadProductsAsync();
    }
    
    private async Task LoadProductsAsync()
    {
        var response = await Http.GetAsync($"{ExtensionMethods.GetDemoApiUrl()}/items/");
        if (response.IsSuccessStatusCode)
        {
            _items = await response.Content.ReadFromJsonAsync<List<HardwareItemDto>>() ?? [];
        }
    }

    private void ShowDetailsModal(HardwareItemDto item)
    {
        selectedItem = item;
    }

    private async Task CheckEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendAsync(_ask);
        }
    }

    private async Task InitRagAsync()
    {
        _selectedChat.Messages = _messages;
        _selectedChat.Model = selectedModel;
        var replyServerOllama = await Http.PostAsJsonAsync($"{ExtensionMethods.GetApiUrl()}/api/rag/complete", _selectedChat);
        if (replyServerOllama.IsSuccessStatusCode)
        {
            var response = await replyServerOllama.Content.ReadFromJsonAsync<ChatDto>();
            if (response != null)
            {
                _messages = response.Messages;
            }
        }
        _loading = false;
        _ask = string.Empty;
    }
    
    private async Task SendAsync(string prompt)
    {
        _loading = true;
        if (!string.IsNullOrWhiteSpace(prompt))
        {
            _messages.Add(new Message { Role = Role.User.ToString(), Content = prompt });
            _selectedChat.Messages = _messages;
            _selectedChat.Model = selectedModel;

            var replyServerOllama = await Http.PostAsJsonAsync($"{ExtensionMethods.GetApiUrl()}/api/rag/complete", _selectedChat);

            if (replyServerOllama.IsSuccessStatusCode)
            {
                var response = await replyServerOllama.Content.ReadFromJsonAsync<ChatDto>();
                if (response != null)
                {
                    _messages = response.Messages;
                }
            }
            _loading = false;
            _ask = string.Empty;
        }
    }

    private string GetRoleLabel(string role) => role == Role.User.ToString() ? "User" : "\ud83d\udc7e Assistant";
}
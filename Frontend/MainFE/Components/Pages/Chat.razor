@page "/chat"
@using MainFE.Components.Models
@using Markdig
@using Microsoft.FluentUI.AspNetCore.Components
@using NAssetNameGenerator
@using Message = MainFE.Components.Models.Message
@using MainFE.Components.Elements
@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>💬 Chat</PageTitle>
<link rel="stylesheet" href="css/chat.css">

<FluentGrid Class="containerbox" Spacing="1" Justify="JustifyContent.FlexStart">
    <FluentGridItem lg="3" sm="12" xs="12" Class="sidebar">
        <FluentButton OnClick="@NewChatAsync"
                      IconStart="@(new Icons.Regular.Size24.Add())" BackgroundColor="rgba(0, 0, 0, 0.53)" Appearance="Appearance.Accent"
                      Style="margin-bottom: 10px;">
            New Chat
        </FluentButton>
        @foreach (var chat in _chats)
        {
            <div class="chat-item">
                <FluentCard @onclick="() => LoadChatAsync(chat.Id)"
                            Class="@GetChatCardClass(chat)">
                    Chat - @chat.Name
                </FluentCard>
                <FluentButton OnClick="() => DeleteChatAsync(chat.Id)"
                              IconStart="@(new Icons.Filled.Size16.Delete())" BackgroundColor="rgba(0,0,0,0)" Appearance="Appearance.Accent"
                              Class="delete-button">
                </FluentButton>
            </div>
        }
    </FluentGridItem>
    <FluentGridItem lg="6" xs="12" Class="chat-container">
        <ChatComponent Chat="@_selectedChat" SelectedModel="@selectedModel" IsLoading="@_loading" />
    </FluentGridItem>
    <FluentGridItem lg="2" xs="12" Style="padding: 10px">
        <h3 style="color: #3dd5f3">Select a Model</h3>
        <TileSelect TItem="string" Items="models" SelectedItem="selectedModel" SelectedItemChanged="OnModelSelected"/>
    </FluentGridItem>
</FluentGrid>

@code {
    // Models
    List<string> models = [];
    string selectedModel = string.Empty;
    
    // Data
    List<ChatDto> _chats = new();
    ChatDto _selectedChat = new()
    {
        Messages = []
    };
    bool _loading = false;
    
    private void OnModelSelected(string model)
    {
        selectedModel = model;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadChatsAsync();
        await LoadModelsAsync();
    }

    private async Task LoadChatsAsync()
    {
        var response = await Http.GetAsync($"{ExtensionMethods.GetApiUrl()}/api/chats");
        if (response.IsSuccessStatusCode)
        {
            _chats = await response.Content.ReadFromJsonAsync<List<ChatDto>>() ?? [];
        }
    }

    private async Task LoadModelsAsync()
    {
        var response = await Http.GetAsync($"{ExtensionMethods.GetApiUrl()}/api/chats/models");
        if (response.IsSuccessStatusCode)
        {
            models = await response.Content.ReadFromJsonAsync<List<string>>() ?? [];
            selectedModel = models!.First();
        }
    }

    private async Task LoadChatAsync(string chatId)
    {
        var response = await Http.GetFromJsonAsync<ChatDto>($"{ExtensionMethods.GetApiUrl()}/api/chats/{chatId}");
        if (response != null)
        {
            _selectedChat = response;
            _chats.ForEach(c => c.IsSelected = c.Id == chatId);
        }
    }

    private async Task DeleteChatAsync(string id)
    {
        var response = await Http.DeleteAsync($"{ExtensionMethods.GetApiUrl()}/api/chats/{id}");
        if (response.IsSuccessStatusCode)
        {
            _chats.RemoveAll(c => c.Id == id);
            if (_selectedChat.Id == id)
            {
                _selectedChat = new();
            }
        }
    }

    private async Task NewChatAsync()
    {
        var newChatRequest = new ChatRequest
        {
            Model = selectedModel,
            Messages = new List<Message>(),
            Name = $"{AssetName.NewName()} | {DateTime.Now.ToShortDateString()}",
            Stream = false,
        };

        var result = await Http.PostAsJsonAsync($"{ExtensionMethods.GetApiUrl()}/api/chats", newChatRequest);

        if (result.IsSuccessStatusCode)
        {
            var response = await result.Content.ReadFromJsonAsync<ChatDto>();
            if (response != null)
            {
                response.IsSelected = true;
                _selectedChat = response;
                _chats.Add(response);
                await LoadChatAsync(response.Id);
            }
        }
    }

    // Helper methods
    private string GetChatCardClass(ChatDto chat) => chat.IsSelected ? "selected-chat-card" : "chat-card";
}
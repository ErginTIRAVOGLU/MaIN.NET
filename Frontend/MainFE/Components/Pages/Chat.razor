@page "/chat"
@using MainFE.Components.Models
@using Markdig
@using Microsoft.FluentUI.AspNetCore.Components
@using NAssetNameGenerator
@using Message = MainFE.Components.Models.Message
@using MainFE.Components.Elements
@inject HttpClient Http
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>💬 Chat</PageTitle>
<link rel="stylesheet" href="css/chat.css">
<FluentGrid Class="containerbox" Spacing="1" Justify="JustifyContent.FlexStart">
    <FluentGridItem lg="3" sm="12" xs="12" Class="sidebar">
        <FluentButton OnClick="@NewChatAsync"
                      IconStart="@(new Icons.Regular.Size24.Add())" BackgroundColor="rgba(0, 0, 0, 0.53)" Appearance="Appearance.Accent"
                      Style="margin-bottom: 10px;">
            New Chat
        </FluentButton>
        @foreach (var chat in _chats)
        {
            <div class="chat-item">
                <FluentCard @onclick="() => LoadChatAsync(chat.Id)"
                            Class="@GetChatCardClass(chat)">
                    Chat - @chat.Name
                </FluentCard>
                <FluentButton OnClick="() => DeleteChatAsync(chat.Id)"
                              IconStart="@(new Icons.Filled.Size16.Delete())" BackgroundColor="rgba(0,0,0,0)" Appearance="Appearance.Accent"
                              Class="delete-button">
                </FluentButton>
            </div>
        }
    </FluentGridItem>
    <FluentGridItem lg="6" xs="12" Class="chat-container">
        <ChatComponent Chat="@_selectedChat" Translate="@_translate" SelectedModel="@_selectedModel" IsLoading="@_loading" Files="@Files"/>
    </FluentGridItem>
    <FluentGridItem lg="2" xs="12" Style="padding: 10px">
        <h3 style="color: #3dd5f3">Select a Model</h3>
        <TileSelect TItem="string" Items="_models" SelectedItem="_selectedModel" SelectedItemChanged="OnModelSelected"/>

        <br/>
        <h3 style="color: #3dd5f3">Multilingual</h3>
        <div class="containerToggle">
            <span class="text">Improve translations</span>
            <input type="checkbox" @bind="_translate" id="checkboxInput">
            <label for="checkboxInput" class="toggleSwitch"></label>
        </div>

        <br/>

        @if (ExtensionMethods.IsVisionModel(_selectedModel))
        {
            <FluentInputFile Id="my-file-uploader"
                             Mode="InputFileMode.SaveToTemporaryFolder"
                             Multiple="true"
                             MaximumFileCount="4"
                             MaximumFileSize="@(10 * 1024 * 1024)"
                             Accept="image/*"
                             @bind-ProgressPercent="@ProgressPercent"
                             OnCompleted="@OnCompletedAsync"
                             Style="height: 150px; border: 1px dashed var(--accent-fill-rest); background-color: transparent !important;">
                <ChildContent>
                    <br/>
                    <label for="my-file-uploader">
                        <FluentIcon Value="@(new @Icons.Regular.Size24.ArrowUpload())"/>
                    </label>

                    <div style="color: #7aeda3">
                        Drag files here
                        or <label for="my-file-uploader">browse</label>
                        <br/>
                    </div>

                    <div>
                        <br/>
                    </div>
                </ChildContent>
            </FluentInputFile>
            
            @if (Files.Any())
            {
                <h6 style="color: #7aeda3">File(s) uploaded:</h6>
                <ul>
                    @foreach (var file in Files)
                    {
                        <li style="color: #7aeda3">
                            <b>@file.Name</b> 🔹
                            @($"{Decimal.Divide(file.Size, 1024):N} KB") 🔹
                            @file.ContentType 🔹
                            @file.LocalFile?.FullName
                            @file.ErrorMessage
                        </li>
                    }
                </ul>
            }
        }
    </FluentGridItem>
</FluentGrid>

@code {

    // Models
    bool _translate = false;
    List<string> _models = [];
    string _selectedModel = string.Empty;
    bool _loading = false;
    
    // Data
    List<ChatDto> _chats = new();

    ChatDto _selectedChat = new()
    {
        Messages = []
    };
    
    private void OnModelSelected(string model)
    {
        _selectedModel = model;
    }

    int ProgressPercent = 0;
    FluentInputFileEventArgs[] Files = [];

    private async Task OnCompletedAsync(IEnumerable<FluentInputFileEventArgs> files)
    {
        Files = files.ToArray();
        // Wait 3 seconds before to reset the progress bar.
        await Task.Delay(3000);
        ProgressPercent = 0;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadChatsAsync();
        await LoadModelsAsync();
    }

    private async Task LoadChatsAsync()
    {
        var response = await Http.GetAsync($"{ExtensionMethods.GetApiUrl()}/api/chats");
        if (response.IsSuccessStatusCode)
        {
            _chats = await response.Content.ReadFromJsonAsync<List<ChatDto>>() ?? [];
        }
    }

    private async Task LoadModelsAsync()
    {
        var response = await Http.GetAsync($"{ExtensionMethods.GetApiUrl()}/api/chats/models");
        if (response.IsSuccessStatusCode)
        {
            _models = await response.Content.ReadFromJsonAsync<List<string>>() ?? [];
            _selectedModel = _models!.First();
        }
    }

    private async Task LoadChatAsync(string chatId)
    {
        var response = await Http.GetFromJsonAsync<ChatDto>($"{ExtensionMethods.GetApiUrl()}/api/chats/{chatId}");
        if (response != null)
        {
            _selectedChat = response;
            _chats.ForEach(c => c.IsSelected = c.Id == chatId);
        }
    }

    private async Task DeleteChatAsync(string id)
    {
        var response = await Http.DeleteAsync($"{ExtensionMethods.GetApiUrl()}/api/chats/{id}");
        if (response.IsSuccessStatusCode)
        {
            _chats.RemoveAll(c => c.Id == id);
            if (_selectedChat.Id == id)
            {
                _selectedChat = new();
            }
        }
    }

    private async Task NewChatAsync()
    {
        var newChatRequest = new ChatRequest
        {
            Model = _selectedModel,
            Messages = new List<Message>(),
            Name = $"{AssetName.NewName()} | {DateTime.Now.ToShortDateString()}",
            Stream = false,
        };

        var result = await Http.PostAsJsonAsync($"{ExtensionMethods.GetApiUrl()}/api/chats", newChatRequest);

        if (result.IsSuccessStatusCode)
        {
            var response = await result.Content.ReadFromJsonAsync<ChatDto>();
            if (response != null)
            {
                response.IsSelected = true;
                _selectedChat = response;
                _chats.Add(response);
                await LoadChatAsync(response.Id);
            }
        }
    }

    // Helper methods
    private string GetChatCardClass(ChatDto chat) => chat.IsSelected ? "selected-chat-card" : "chat-card";
}
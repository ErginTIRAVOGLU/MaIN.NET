@page "/chat"
@using MainFE.Components.Models
@using Markdig
@using Microsoft.FluentUI.AspNetCore.Components
@using NAssetNameGenerator
@using Message = MainFE.Components.Models.Message
@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>💬 Chat</PageTitle>
<link rel="stylesheet" href="css/chat.css">

<FluentGrid Class="containerbox" Spacing="1" Justify="JustifyContent.FlexStart">
    <FluentGridItem lg="3" sm="12" xs="12" Class="sidebar">
        <FluentButton OnClick="@NewChatAsync"
                      IconStart="@(new Icons.Regular.Size24.Add())" BackgroundColor="rgba(0, 0, 0, 0.53)" Appearance="Appearance.Accent"
                      Style="margin-bottom: 10px;">
            New Chat
        </FluentButton>
        @foreach (var chat in _chats)
        {
            <div class="chat-item">
                <FluentCard @onclick="() => LoadChatAsync(chat.Id)"
                            Class="@GetChatCardClass(chat)">
                    Chat - @chat.Name
                </FluentCard>
                <FluentButton OnClick="() => DeleteChatAsync(chat.Id)"
                              IconStart="@(new Icons.Filled.Size16.Delete())" BackgroundColor="rgba(0,0,0,0)" Appearance="Appearance.Accent"
                              Class="delete-button">
                </FluentButton>
            </div>
        }
    </FluentGridItem>
    <FluentGridItem lg="7" xs="12" Class="chat-container">
        <div class="messages-container">
            @foreach (var message in _messages)
            {
                <span class="@(message.Role == Role.User.ToString() ? "message-role-user" : "message-role-bot")">@GetRoleLabel(message.Role)</span>
                <FluentCard class="@(message.Role == Role.User.ToString() ? "message-card user-message" : "message-card bot-message")">
                    @((MarkupString)((message.Role == Role.User.ToString() ? message.Content : 
    Markdown.ToHtml((string)message.Content!,
        new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .Build())) ?? string.Empty))
                </FluentCard>
            }
            @if (_loading)
            {
                <span class="message-role-bot">@selectedModel</span>
                <FluentProgressRing Visible="_loading"></FluentProgressRing>
            }
        </div>
        <div class="input-container">
            <input @bind-value="_ask" @bind-value:event="oninput" placeholder="Enter your prompt here..." @onkeydown="CheckEnterKey" class="inp">
            <FluentButton IconStart="@(new Icons.Filled.Size28.Send())" BackgroundColor="rgba(0, 0, 0, 0)" Style="margin-top: 5px; background-color: transparent"
                          Appearance="Appearance.Lightweight"
                          Loading="@_loading"
                          OnClick="@(() => SendAsync(_ask))">
            </FluentButton>
        </div>
        <FluentProgress Visible="@(_loading)" style="width: 100%;"></FluentProgress>
    </FluentGridItem>
    <FluentGridItem lg="1" xs="12" Style="padding: 10px">
        <span class="model-label">Model:</span>
        <select id="modelSelect" @bind="selectedModel" Class="select-element">
            @foreach (var model in models)
            {
                <option Value="@model">@model</option>
            }
        </select>
    </FluentGridItem>
</FluentGrid>

@code {
    // Models
    List<string> models = [];
    string selectedModel = string.Empty;
    
    // Data
    List<Message> _messages = new();
    List<ChatDto> _chats = new();
    ChatDto _selectedChat = new();
    string _ask = string.Empty;
    bool _loading = false;

    private async Task CheckEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendAsync(_ask);
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        Http.Timeout = TimeSpan.FromMinutes(10);
        await LoadChatsAsync();
        await LoadModelsAsync();
    }

    private async Task LoadChatsAsync()
    {
        
        var response = await Http.GetAsync($"{ExtensionMethods.GetApiUrl()}/api/chats");
        if (response.IsSuccessStatusCode)
        {
            _chats = await response.Content.ReadFromJsonAsync<List<ChatDto>>() ?? [];
        }
    }

    private async Task LoadModelsAsync()
    {
        var response = await Http.GetAsync($"{ExtensionMethods.GetApiUrl()}/api/chats/models");
        if (response.IsSuccessStatusCode)
        {
            models = await response.Content.ReadFromJsonAsync<List<string>>() ?? [];
            selectedModel = models!.First();
        }
    }

    private async Task LoadChatAsync(string chatId)
    {
        var response = await Http.GetFromJsonAsync<ChatDto>($"{ExtensionMethods.GetApiUrl()}/api/chats/{chatId}");
        if (response != null)
        {
            _messages = response.Messages;
            _selectedChat = response;
            _chats.ForEach(c => c.IsSelected = c.Id == chatId);
        }
    }

    private async Task DeleteChatAsync(string id)
    {
        var response = await Http.DeleteAsync($"{ExtensionMethods.GetApiUrl()}/api/chats/{id}");
        if (response.IsSuccessStatusCode)
        {
            _chats.RemoveAll(c => c.Id == id);
            if (_selectedChat.Id == id)
            {
                _selectedChat = new();
                _messages.Clear();
            }
        }
    }

    private async Task NewChatAsync()
    {
        _messages.Clear();
        var newChatRequest = new ChatRequest
        {
            Model = selectedModel,
            Messages = new List<Message>(),
            Name = $"{AssetName.NewName()} | {DateTime.Now.ToShortDateString()}",
            Stream = false,
        };

        var result = await Http.PostAsJsonAsync($"{ExtensionMethods.GetApiUrl()}/api/chats", newChatRequest);

        if (result.IsSuccessStatusCode)
        {
            var response = await result.Content.ReadFromJsonAsync<ChatDto>();
            if (response != null)
            {
                response.IsSelected = true;
                _selectedChat = response;
                _chats.Add(response);
                await LoadChatAsync(response.Id);
            }
        }
    }

    private async Task SendAsync(string message)
    {
        _loading = true;
        if (!string.IsNullOrWhiteSpace(message))
        {
            _messages.Add(new Message { Role = Role.User.ToString(), Content = message });
            _selectedChat.Messages = _messages;
            _selectedChat.Model = selectedModel;

            var replyServerOllama = await Http.PostAsJsonAsync($"{ExtensionMethods.GetApiUrl()}/api/chats/complete", _selectedChat);

            if (replyServerOllama.IsSuccessStatusCode)
            {
                var response = await replyServerOllama.Content.ReadFromJsonAsync<ChatResponse>();
                if (response != null)
                {
                    _messages.Add(response.Message);
                }
            }
            _loading = false;
            _ask = string.Empty;
        }
    }

    // Helper methods
    private string GetChatCardClass(ChatDto chat) => chat.IsSelected ? "selected-chat-card" : "chat-card";
    private string GetRoleLabel(string role) => role == Role.User.ToString() ? "( ͡° ͜ʖ ͡°) User" : $"🤖 {selectedModel}";
}
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using Size32 = Microsoft.FluentUI.AspNetCore.Components.Icons.Filled.Size32
@inject NavigationManager _navigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<FluentDesignTheme @bind-Mode="@Mode"
                   StorageName="theme" />

<header class="navbar">
    <span class="fancy-text" style="align-self: flex-start;">M.A.I.N</span>
    <FluentBadge 
        Appearance="Appearance.Neutral"
        Fill="highlight" 
        BackgroundColor="#ffd800;"
        Color="#000"
        Style="margin-left: 10px">@Utils.Model</FluentBadge>
    @if (Utils.Reason)
    {
        <FluentBadge
            Appearance="Appearance.Accent"
            BackgroundColor="#ffd800;"
            Color="#000"
            Style="margin-left: 10px">Reasoning âœ¨</FluentBadge>
    }
    <div  style="margin-left: auto; align-self: flex-end;">
    <FluentButton Style="padding: 10px"
                  Appearance="Appearance.Stealth"
                  OnClick="@Reload" IconStart="@(new Icons.Filled.Size20.ArrowClockwise())">
    </FluentButton>
    <FluentButton
                  Appearance="Appearance.Stealth"
                  OnClick="@SetTheme" IconStart="@(new Size24.WeatherMoon())">
    </FluentButton>
    </div>
</header>

@code {
    private DesignThemeModes Mode { get; set; }

    private void SetTheme()
    {
        Mode = Mode == DesignThemeModes.Dark ? DesignThemeModes.Light : DesignThemeModes.Dark;
    }

    private void Reload(MouseEventArgs obj)
    {
        _navigationManager.Refresh(true);
    }

}